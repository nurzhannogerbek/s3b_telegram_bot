AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Parameters:
    PostgreSQLUsername:
        Type: String
    PostgreSQLPassword:
        Type: String
    PostgreSQLHost:
        Type: String
    PostgreSQLPort:
        Type: String
    PostgreSQLDBName:
        Type: String
    Auth0Domain:
        Type: String
    Auth0Audience:
        Type: String
    TelegramBotToken:
        Type: String
    EnvironmentName:
        Type: String
    StageName:
        Type: String
    AppsyncApiUrl:
        Type: String
    AppsyncApiKey:
        Type: String
    DatabasesLayerARN:
        Type: String
    RequestsLayerARN:
        Type: String
Globals:
    Function:
        Runtime: python3.8
        MemorySize: 3008
        Timeout: 900
        Environment:
            Variables:
                POSTGRESQL_USERNAME:
                    Fn::Sub: "${PostgreSQLUsername}"
                POSTGRESQL_PASSWORD:
                    Fn::Sub: "${PostgreSQLPassword}"
                POSTGRESQL_HOST:
                    Fn::Sub: "${PostgreSQLHost}"
                POSTGRESQL_PORT:
                    Fn::Sub: "${PostgreSQLPort}"
                POSTGRESQL_DB_NAME:
                    Fn::Sub: "${PostgreSQLDBName}"
                TELEGRAM_BOT_TOKEN:
                    Fn::Sub: "${TelegramBotToken}"
                APPSYNC_API_URL:
                    Fn::Sub: "${AppsyncApiUrl}"
                APPSYNC_API_KEY:
                    Fn::Sub: "${AppsyncApiKey}"
Resources:
    TelegramApiGateway:
        Type: AWS::Serverless::HttpApi
        Properties:
            StageName:
                Fn::Sub: "${StageName}"
            CorsConfiguration:
                AllowMethods:
                    - GET
                    - POST
                AllowHeaders:
                    - "*"
                AllowOrigins:
                    - "*"
            Auth:
                Authorizers:
                    Auth0Authorizer:
                        JwtConfiguration:
                            issuer:
                                Fn::Sub: "${Auth0Domain}"
                            audience:
                                - Fn::Sub: "${Auth0Audience}"
                        IdentitySource: "$request.header.Authorization"
    SendMessageFromTelegram:
        Type: AWS::Serverless::Function
        Properties:
            FunctionName:
                Fn::Sub: "${EnvironmentName}SendMessageFromTelegram"
            CodeUri: src/aws_lambda_functions/send_message_from_telegram
            Handler: lambda_function.lambda_handler
            Events:
                TelegramApiGatewayEvent:
                    Type: HttpApi
                    Properties:
                        ApiId:
                            Ref: TelegramApiGateway
                        Path: /send_message_from_telegram
                        Method: POST
            Layers:
                - Fn::Sub: "${DatabasesLayerARN}"
                - Fn::Sub: "${RequestsLayerARN}"
    SendMessageToTelegram:
        Type: AWS::Serverless::Function
        Properties:
            FunctionName:
                Fn::Sub: "${EnvironmentName}SendMessageToTelegram"
            CodeUri: src/aws_lambda_functions/send_message_to_telegram
            Handler: lambda_function.lambda_handler
            Events:
                TelegramApiGatewayEvent:
                    Type: HttpApi
                    Properties:
                        ApiId:
                            Ref: TelegramApiGateway
                        Path: /send_message_to_telegram
                        Method: POST
                        Auth:
                            Authorizer: Auth0Authorizer
            Layers:
                - Fn::Sub: "${DatabasesLayerARN}"
                - Fn::Sub: "${RequestsLayerARN}"
    SendNotificationToTelegram:
        Type: AWS::Serverless::Function
        Properties:
            FunctionName:
                Fn::Sub: "${EnvironmentName}SendNotificationToTelegram"
            CodeUri: src/aws_lambda_functions/send_notification_to_telegram
            Handler: lambda_function.lambda_handler
            Events:
                TelegramApiGatewayEvent:
                    Type: HttpApi
                    Properties:
                        ApiId:
                            Ref: TelegramApiGateway
                        Path: /send_notification_to_telegram
                        Method: POST
                        Auth:
                            Authorizer: Auth0Authorizer
            Layers:
                - Fn::Sub: "${DatabasesLayerARN}"
                - Fn::Sub: "${RequestsLayerARN}"