AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Parameters:
    CassandraUsername:
        Type: String
    CassandraPassword:
        Type: String
    CassandraHost:
        Type: String
    CassandraPort:
        Type: String
    CassandraLocalDC:
        Type: String
    CassandraKeyspaceName:
        Type: String
    PostgreSQLUsername:
        Type: String
    PostgreSQLPassword:
        Type: String
    PostgreSQLHost:
        Type: String
    PostgreSQLPort:
        Type: String
    PostgreSQLDBName:
        Type: String
    TelegramBotToken:
        Type: String
    EnvironmentName:
        Type: String
    StageName:
        Type: String
    DatabasesLayerARN:
        Type: String
Globals:
    Function:
        Runtime: python3.8
        MemorySize: 3008
        Timeout: 900
        Environment:
            Variables:
                CASSANDRA_USERNAME:
                    Fn::Sub: "${CassandraUsername}"
                CASSANDRA_PASSWORD:
                    Fn::Sub: "${CassandraPassword}"
                CASSANDRA_HOST:
                    Fn::Sub: "${CassandraHost}"
                CASSANDRA_PORT:
                    Fn::Sub: "${CassandraPort}"
                CASSANDRA_LOCAL_DC:
                    Fn::Sub: "${CassandraLocalDC}"
                CASSANDRA_KEYSPACE_NAME:
                    Fn::Sub: "${CassandraKeyspaceName}"
                POSTGRESQL_USERNAME:
                    Fn::Sub: "${PostgreSQLUsername}"
                POSTGRESQL_PASSWORD:
                    Fn::Sub: "${PostgreSQLPassword}"
                POSTGRESQL_HOST:
                    Fn::Sub: "${PostgreSQLHost}"
                POSTGRESQL_PORT:
                    Fn::Sub: "${PostgreSQLPort}"
                POSTGRESQL_DB_NAME:
                    Fn::Sub: "${PostgreSQLDBName}"
                TELEGRAM_BOT_TOKEN:
                    Fn::Sub: "${TelegramBotToken}"
Resources:
    TelegramApiGateway:
        Type: AWS::Serverless::Api
        Properties:
            StageName:
                Fn::Sub: "${StageName}"
            Cors: "'*'"
            OpenApiVersion: "3.0.3"
    SendMessageFromTelegram:
        Type: AWS::Serverless::Function
        Properties:
            FunctionName:
                Fn::Sub: "${EnvironmentName}SendMessageFromTelegram"
            CodeUri: src/aws_lambda_functions/send_message_from_telegram
            Handler: lambda_function.lambda_handler
            Events:
                TelegramApiGatewayEvent:
                    Type: Api
                    Properties:
                        RestApiId:
                            Ref: TelegramApiGateway
                        Path: /send_message_from_telegram
                        Method: POST
            Layers:
                - Fn::Sub: "${DatabasesLayerARN}"